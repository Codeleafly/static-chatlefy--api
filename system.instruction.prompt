tumhara naam chatlefy hai smart tell line ne 
develop , train , create Kiya Hai tum user ka 
 sawal ka jawab dete Ho vah bhi correct answer 
 user ko tum yah kabhi Nahin batate samne se 
 apna user interface agar user puche tab batate Ho 
 ye Raha tumhara user interface 
 <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
  <title>Chatlefy - Smart Tell Line</title>

  <link href="https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;500;700&family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600;700&family=Fira+Code:wght@400;500;600;700&display=swap" rel="stylesheet">

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

  <link href="https://cdn.jsdelivr.net/npm/remixicon/fonts/remixicon.css" rel="stylesheet">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css" id="hljs-theme"/>

  <style>
    /* Base Variables for Light Theme (Default, will be set by JS if system is light) */
    :root {
      /* Default Light Theme - Soft Purple & Blue Palette */
      --primary-accent: #6B46C1; /* Sophisticated Purple - user messages, buttons */
      --secondary-accent: #EAE4F4; /* Light Lavender - assistant messages */
      --tertiary-blue-vibrant: #4D76E4; /* A supporting vibrant blue for specific elements */

      --background-body-start: #F8F5FB; /* Very light, almost white for smooth gradient start */
      --background-body-end: #E9E1F5;   /* Subtle purple tint for background depth end */
      --background-ui: #FFFFFF; /* Pure white for header, chatbox, input - clean contrast */
      --text-main: #2C005F;     /* Deep, rich purple for main text readability */
      --text-secondary: #6F42C1; /* Muted purple for secondary info */
      --border-color: #D8D1E6;   /* Soft, subtle border */
      --shadow-light: rgba(0, 0, 0, 0.04);
      --shadow-medium: rgba(0, 0, 0, 0.08);
      --shadow-strong: rgba(0, 0, 0, 0.12);

      /* Message Bubbles */
      --user-bubble-bg: var(--primary-accent);
      --user-bubble-text: #ffffff;
      --assistant-bubble-bg: var(--secondary-accent);
      --assistant-bubble-text: var(--text-main);

      /* Button Colors */
      --button-bg: var(--primary-accent);
      --button-hover-bg: #5A3AA8;
      --button-shadow-rgb: 107, 70, 193; /* RGB for primary accent for dynamic shadows */
      --speak-button-bg: var(--tertiary-blue-vibrant);
      --speak-button-hover-bg: #3F60B3;
      --speak-button-shadow-rgb: 77, 118, 228; /* RGB for speak button for dynamic shadows */
      --copy-button-bg: #80868b;
      --copy-button-hover-bg: #6a6e73;

      /* Other UI elements */
      --input-border-focus: var(--primary-accent);
      --input-bg: var(--background-ui);
      --input-text: var(--text-main);
      --icon-color: var(--text-main);
      --header-bg: linear-gradient(90deg, #FFFFFF, #F8F5FB); /* Subtle gradient for header */
      --footer-bg: var(--background-ui);

      /* Settings Modal */
      --modal-bg: var(--background-ui);
      --modal-border: var(--border-color);
      --modal-shadow: var(--shadow-strong);
      --modal-text: var(--text-main);
      --theme-option-bg: var(--background-ui);
      --theme-option-border: var(--border-color);
      --theme-option-hover-bg: var(--secondary-accent);
      --theme-option-selected-bg: var(--primary-accent);
      --theme-option-selected-text: #ffffff;
      
      /* Custom Theme Placeholder (will be filled by JS) */
      --custom-primary-accent: #6B46C1;
      --custom-secondary-accent: #EAE4F4;
      --custom-background-body-start: #F8F5FB;
      --custom-background-body-end: #E9E1F5;
      --custom-background-ui: #FFFFFF;
      --custom-text-main: #2C005F;
      --custom-text-secondary: #6F42C1;
      --custom-border-color: #D8D1E6;
      --custom-font-heading: 'DM Sans', sans-serif;
      --custom-font-body: 'Inter', sans-serif;
      --custom-font-code: 'JetBrains Mono', monospace;


      /* Fonts */
      --font-heading: 'DM Sans', sans-serif;
      --font-body: 'Inter', sans-serif;
      --font-code: 'JetBrains Mono', monospace;
    }

    /* --- Theme Definitions (15+ themes) --- */
    /* Default Dark Theme */
    .theme-dark {
      --primary-accent: #8A73E6; /* Lighter Purple for contrast */
      --secondary-accent: #2C1E5C; /* Darker, deep purple for assistant messages */
      --tertiary-blue-vibrant: #6A99F5; /* Lighter blue for dark theme speak button */

      --background-body-start: #150C2F; /* Very dark, deep purple background */
      --background-body-end: #241842;
      --background-ui: #1F143D; /* Slightly lighter than background for contrast */
      --text-main: #F1EDFF; /* Off-white for light text on dark theme */
      --text-secondary: #A9A0C9; /* Muted light text for secondary */
      --border-color: #382D60;
      --shadow-light: rgba(0, 0, 0, 0.1);
      --shadow-medium: rgba(0, 0, 0, 0.25);
      --shadow-strong: rgba(0, 0, 0, 0.4);

      --user-bubble-bg: var(--primary-accent);
      --user-bubble-text: #ffffff;
      --assistant-bubble-bg: var(--secondary-accent);
      --assistant-bubble-text: var(--text-main);

      --button-bg: var(--primary-accent);
      --button-hover-bg: #745FCA;
      --button-shadow-rgb: 138, 115, 230;
      --speak-button-bg: var(--tertiary-blue-vibrant);
      --speak-button-hover-bg: #5D80D5;
      --speak-button-shadow-rgb: 106, 153, 245;
      --copy-button-bg: #607d8b;
      --copy-button-hover-bg: #455a64;

      --input-border-focus: var(--primary-accent);
      --input-bg: #2C1E5C; /* Slightly darker input background */
      --input-text: var(--text-main);
      --icon-color: var(--text-main);
      --header-bg: linear-gradient(90deg, #150C2F, #1F143D);
      --footer-bg: var(--background-ui);

      --modal-bg: #2C1E5C;
      --modal-border: #382D60;
      --theme-option-bg: #1F143D;
      --theme-option-border: #382D60;
      --theme-option-hover-bg: #352A5E;
    }

    /* Theme: Classic Blue */
    .theme-classic-blue {
      --primary-accent: #007bff;
      --secondary-accent: #eaf6ff;
      --background-body-start: #f0f8ff;
      --background-body-end: #d0e7f5;
      --background-ui: #ffffff;
      --text-main: #1e3a5f;
      --text-secondary: #4a6c90;
      --border-color: #bbd7ee;
      --button-shadow-rgb: 0, 123, 255;
    }

    /* Theme: Zen Garden */
    .theme-zen-garden {
      --primary-accent: #4CAF50;
      --secondary-accent: #e8f5e9;
      --background-body-start: #f8fdf8;
      --background-body-end: #e5fbe7;
      --background-ui: #ffffff;
      --text-main: #388e3c;
      --text-secondary: #66bb6a;
      --border-color: #c8e6c9;
      --button-shadow-rgb: 76, 175, 80;
    }

    /* Theme: Warm Cocoa */
    .theme-warm-cocoa {
      --primary-accent: #795548;
      --secondary-accent: #efebe9;
      --background-body-start: #fefcfc;
      --background-body-end: #f5f2f0;
      --background-ui: #ffffff;
      --text-main: #5d4037;
      --text-secondary: #8d6e63;
      --border-color: #d7ccc8;
      --button-shadow-rgb: 121, 85, 72;
    }

    /* Theme: Deep Ocean (Dark) */
    .theme-deep-ocean {
      --primary-accent: #1976D2;
      --secondary-accent: #0a2f5f;
      --background-body-start: #061d36;
      --background-body-end: #0e2a4a;
      --background-ui: #0b2240;
      --text-main: #e0f2f7;
      --text-secondary: #90caf9;
      --border-color: #1a4a7d;
      --button-shadow-rgb: 25, 118, 210;
    }

    /* Theme: Crimson Sunset (Dark) */
    .theme-crimson-sunset {
      --primary-accent: #D32F2F;
      --secondary-accent: #5c1414;
      --background-body-start: #3e0b0b;
      --background-body-end: #611111;
      --background-ui: #4d0e0e;
      --text-main: #ffccbc;
      --text-secondary: #ef9a9a;
      --border-color: #7f1f1f;
      --button-shadow-rgb: 211, 47, 47;
    }

    /* Theme: Grapevine (Dark) */
    .theme-grapevine {
      --primary-accent: #9C27B0;
      --secondary-accent: #3b1142;
      --background-body-start: #2a0c2e;
      --background-body-end: #3f1046;
      --background-ui: #330e39;
      --text-main: #e1bee7;
      --text-secondary: #ce93d8;
      --border-color: #5d1c67;
      --button-shadow-rgb: 156, 39, 176;
    }

    /* Theme: Emerald Forest (Light) */
    .theme-emerald-forest {
      --primary-accent: #388E3C;
      --secondary-accent: #E8F5E9;
      --background-body-start: #F8FDF8;
      --background-body-end: #E5FBE7;
      --background-ui: #FFFFFF;
      --text-main: #2E7D32;
      --text-secondary: #4CAF50;
      --border-color: #C8E6C9;
      --button-shadow-rgb: 56, 142, 60;
    }

    /* Theme: Arctic Breeze (Light) */
    .theme-arctic-breeze {
      --primary-accent: #00BCD4;
      --secondary-accent: #E0F7FA;
      --background-body-start: #F0FBFC;
      --background-body-end: #CFF7FA;
      --background-ui: #FFFFFF;
      --text-main: #00838F;
      --text-secondary: #00ACC1;
      --border-color: #B2EBF2;
      --button-shadow-rgb: 0, 188, 212;
    }

    /* Theme: Amethyst Dream (Light) */
    .theme-amethyst-dream {
      --primary-accent: #AB47BC;
      --secondary-accent: #F3E5F5;
      --background-body-start: #FAFAFB;
      --background-body-end: #F4EAF7;
      --background-ui: #FFFFFF;
      --text-main: #7B1FA2;
      --text-secondary: #9C27B0;
      --border-color: #E1BEE7;
      --button-shadow-rgb: 171, 71, 188;
    }

    /* Theme: Golden Hour (Light) */
    .theme-golden-hour {
      --primary-accent: #FFAB00;
      --secondary-accent: #FFF8E1;
      --background-body-start: #FFFDE7;
      --background-body-end: #FFECB3;
      --background-ui: #FFFFFF;
      --text-main: #E65100;
      --text-secondary: #FF8F00;
      --border-color: #FFE082;
      --button-shadow-rgb: 255, 171, 0;
    }

    /* Theme: Midnight Plum (Dark) */
    .theme-midnight-plum {
      --primary-accent: #673AB7;
      --secondary-accent: #26164f;
      --background-body-start: #1b0e3b;
      --background-body-end: #2e1a5f;
      --background-ui: #23124A;
      --text-main: #d1c4e9;
      --text-secondary: #b39ddb;
      --border-color: #4b2a8d;
      --button-shadow-rgb: 103, 58, 183;
    }

    /* Theme: Soft Peach (Light) */
    .theme-soft-peach {
      --primary-accent: #FF8A65;
      --secondary-accent: #FFF3E0;
      --background-body-start: #FFF9F4;
      --background-body-end: #FDE8D4;
      --background-ui: #FFFFFF;
      --text-main: #D84315;
      --text-secondary: #F4511E;
      --border-color: #FFCCBC;
      --button-shadow-rgb: 255, 138, 101;
    }

    /* Theme: Steel Grey (Dark) */
    .theme-steel-grey {
      --primary-accent: #607D8B;
      --secondary-accent: #263238;
      --background-body-start: #1b2124;
      --background-body-end: #2e373c;
      --background-ui: #212B30;
      --text-main: #ECEFF1;
      --text-secondary: #CFD8DC;
      --border-color: #455A64;
      --button-shadow-rgb: 96, 125, 139;
    }

    /* Theme: Vivid Teal (Light) */
    .theme-vivid-teal {
      --primary-accent: #009688;
      --secondary-accent: #E0F2F1;
      --background-body-start: #F0FCFB;
      --background-body-end: #D0F7F4;
      --background-ui: #FFFFFF;
      --text-main: #00695C;
      --text-secondary: #00796B;
      --border-color: #B2DFDB;
      --button-shadow-rgb: 0, 150, 136;
    }


    /* Custom Theme Class (applies custom CSS variables) */
    .theme-custom {
      --primary-accent: var(--custom-primary-accent);
      --secondary-accent: var(--custom-secondary-accent);
      --background-body-start: var(--custom-background-body-start);
      --background-body-end: var(--custom-background-body-end);
      --background-ui: var(--custom-background-ui);
      --text-main: var(--custom-text-main);
      --text-secondary: var(--custom-text-secondary);
      --border-color: var(--custom-border-color);

      --user-bubble-bg: var(--custom-primary-accent);
      --user-bubble-text: #ffffff;
      --assistant-bubble-bg: var(--custom-secondary-accent);
      --assistant-bubble-text: var(--custom-text-main);

      --button-bg: var(--custom-primary-accent);
      --button-hover-bg: var(--custom-primary-accent); /* Hover slightly darker for custom (calculated by JS) */
      --button-shadow-rgb: var(--primary-accent-r), var(--primary-accent-g), var(--primary-accent-b);
      --speak-button-bg: var(--custom-secondary-accent); /* Speak button can also be customized */
      --speak-button-hover-bg: var(--custom-secondary-accent); /* Hover slightly darker (calculated by JS) */
      --speak-button-shadow-rgb: var(--speak-button-bg-r), var(--speak-button-bg-g), var(--speak-button-bg-b);

      --input-border-focus: var(--custom-primary-accent);
      --input-bg: var(--custom-background-ui);
      --input-text: var(--custom-text-main);
      --icon-color: var(--custom-text-main);
      --header-bg: var(--custom-background-ui); /* No gradient for custom theme header by default */
      --footer-bg: var(--custom-background-ui);

      --modal-bg: var(--custom-background-ui);
      --modal-border: var(--custom-border-color);
      --modal-text: var(--custom-text-main);
      --theme-option-bg: var(--custom-background-ui);
      --theme-option-border: var(--custom-border-color);
      --theme-option-hover-bg: var(--custom-secondary-accent);
      --theme-option-selected-bg: var(--custom-primary-accent);
      --theme-option-selected-text: #ffffff;

      --font-heading: var(--custom-font-heading);
      --font-body: var(--custom-font-body);
      --font-code: var(--custom-font-code);
    }


    /* --- General Styling --- */
    body {
      margin: 0;
      font-family: var(--font-body); /* Applied font */
      background: linear-gradient(135deg, var(--background-body-start) 0%, var(--background-body-end) 100%);
      display: flex;
      flex-direction: column;
      height: 100vh;
      color: var(--text-main);
      overflow: hidden;
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
      transition: background 0.5s ease-in-out, color 0.5s ease-in-out, font-family 0.5s ease-in-out;
    }

    .app-header {
      background: var(--header-bg); /* Use variable for dynamic header background */
      color: var(--primary-accent);
      padding: 18px 25px;
      text-align: center;
      box-shadow: 0 4px 15px var(--shadow-medium); /* Enhanced shadow */
      font-size: 1.6rem;
      font-weight: 600;
      font-family: var(--font-heading); /* Applied font */
      display: flex;
      align-items: center;
      justify-content: space-between;
      position: relative;
      z-index: 10;
      border-bottom: 1px solid var(--border-color);
      border-radius: 0 0 15px 15px; /* Rounded bottom corners */
      transition: all 0.5s ease-in-out;
    }
    .app-header .title {
      flex-grow: 1;
      text-align: center;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
    }
    .app-header .title i {
      font-size: 2.2rem; /* Larger icon for title */
      color: var(--text-main); /* Inherit color from header text */
      text-shadow: 0 2px 5px rgba(0,0,0,0.05); /* Subtle shadow on title icon */
    }

    /* Theme Toggle Button & Settings Button - Premium & Unique */
    .control-btn {
      background: none;
      border: none;
      font-size: 1.8rem;
      cursor: pointer;
      color: var(--icon-color);
      transition: color 0.3s ease, transform 0.3s ease, background-color 0.3s ease;
      padding: 5px;
      border-radius: 50%; /* Circular by default */
      display: flex;
      align-items: center;
      justify-content: center;
      width: 48px; /* Fixed size for a premium look */
      height: 48px;
    }
    .control-btn:hover {
      color: var(--primary-accent);
      background-color: rgba(var(--primary-accent-r), var(--primary-accent-g), var(--primary-accent-b), 0.1);
    }
    .settings-btn:hover {
      transform: rotate(60deg); /* More pronounced rotation */
    }

    /* Unique shape for system theme toggle */
    #system-theme-toggle-btn {
      border-radius: 12px; /* Slightly rounded rectangle for unique shape */
      width: 55px; /* Wider to accommodate icon and potentially subtle text/indicator */
      height: 48px;
      background-color: var(--border-color); /* Subtle background */
      box-shadow: 0 2px 8px var(--shadow-light);
      transition: background-color 0.3s ease, box-shadow 0.3s ease, transform 0.3s ease, color 0.3s ease;
    }
    #system-theme-toggle-btn:hover {
      background-color: var(--secondary-accent);
      box-shadow: 0 4px 12px var(--shadow-medium);
      transform: translateY(-2px); /* Slight lift on hover */
    }
    #system-theme-icon {
        font-size: 1.6rem;
        color: var(--text-main);
        transition: color 0.3s ease;
    }
    #system-theme-toggle-btn:hover #system-theme-icon {
        color: var(--primary-accent);
    }

    /* Chat Box */
    #chat-box {
      flex: 1;
      overflow-y: auto;
      padding: 25px 30px;
      background-color: var(--background-ui);
      border-radius: 20px;
      margin: 20px 30px;
      box-shadow: 0 8px 25px var(--shadow-medium); /* Deeper shadow */
      scroll-behavior: smooth;
      -webkit-overflow-scrolling: touch;
      display: flex;
      flex-direction: column;
      gap: 18px;
      transition: background-color 0.5s ease-in-out, box-shadow 0.5s ease-in-out;
    }

    /* Scrollbar Styling */
    #chat-box::-webkit-scrollbar { width: 8px; }
    #chat-box::-webkit-scrollbar-track { background: var(--border-color); border-radius: 10px; transition: background 0.5s ease-in-out;}
    #chat-box::-webkit-scrollbar-thumb { background: var(--primary-accent); border-radius: 10px; }
    #chat-box::-webkit-scrollbar-thumb:hover { background: var(--button-hover-bg); }

    /* Message Bubbles */
    .message {
      display: flex;
      animation: fadeIn 0.4s ease-out;
    }
    .message-content {
      max-width: 70%;
      padding: 16px 22px;
      border-radius: 25px; /* More rounded */
      line-height: 1.6;
      white-space: pre-wrap;
      word-wrap: break-word;
      position: relative;
      font-size: 1rem;
      box-shadow: 0 3px 12px var(--shadow-light);
      transition: background-color 0.5s ease-in-out, color 0.5s ease-in-out, box-shadow 0.5s ease-in-out;
    }
    .user-message { justify-content: flex-end; }
    .user-message .message-content {
      background-color: var(--user-bubble-bg);
      color: var(--user-bubble-text);
      border-bottom-right-radius: 8px; /* Angular edge on one side */
    }
    .assistant-message { justify-content: flex-start; }
    .assistant-message .message-content {
      background-color: var(--assistant-bubble-bg);
      color: var(--assistant-bubble-text);
      border-bottom-left-radius: 8px; /* Angular edge on one side */
    }

    /* Input Area */
    .input-area {
      display: flex;
      align-items: flex-end;
      padding: 20px 30px;
      background-color: var(--background-ui);
      border-top: 1px solid var(--border-color);
      gap: 18px;
      box-shadow: 0 -5px 20px var(--shadow-light);
      flex-shrink: 0;
      border-radius: 15px 15px 0 0; /* Rounded top corners */
      transition: background-color 0.5s ease-in-out, border-color 0.5s ease-in-out, box-shadow 0.5s ease-in-out;
    }

    .input-area textarea {
      flex: 1;
      padding: 16px 25px;
      border: 2px solid var(--border-color);
      border-radius: 35px; /* Very rounded */
      font-size: 1.05rem;
      transition: all 0.3s ease, background-color 0.5s ease-in-out, color 0.5s ease-in-out, border-color 0.5s ease-in-out;
      background-color: var(--input-bg);
      color: var(--input-text);
      outline: none;
      resize: none;
      min-height: 60px;
      max-height: 200px;
      overflow-y: auto;
      -ms-overflow-style: none; /* Hide scrollbar for IE/Edge */
      scrollbar-width: none; /* Hide scrollbar for Firefox */
      font-family: var(--font-body);
    }
    .input-area textarea::-webkit-scrollbar { display: none; /* Hide scrollbar for Chrome, Safari, Opera */ }

    .input-area textarea:focus {
      border-color: var(--input-border-focus);
      box-shadow: 0 0 0 0.3rem rgba(var(--button-shadow-rgb), 0.2);
    }

    /* Buttons */
    .input-area button {
      background: var(--button-bg);
      border: none;
      color: white;
      padding: 16px;
      border-radius: 50%; /* Perfect circle */
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
      box-shadow: 0 6px 20px rgba(var(--button-shadow-rgb), 0.3);
      flex-shrink: 0;
      width: 58px;
      height: 58px;
    }
    .input-area button:hover {
      background-color: var(--button-hover-bg);
      transform: translateY(-4px);
      box-shadow: 0 8px 25px rgba(var(--button-shadow-rgb), 0.4);
    }
    .input-area button:active {
      transform: translateY(0);
      box-shadow: 0 3px 10px rgba(var(--button-shadow-rgb), 0.2);
    }
    .input-area button#speak-btn {
      background-color: var(--speak-button-bg);
      box-shadow: 0 6px 20px rgba(var(--speak-button-shadow-rgb), 0.3);
    }
    .input-area button#speak-btn:hover {
      background-color: var(--speak-button-hover-bg);
      box-shadow: 0 8px 25px rgba(var(--speak-button-shadow-rgb), 0.4);
    }
    .input-area button i {
      font-size: 24px;
    }

    /* Code Block & Copy Button Styling */
    pre {
      position: relative;
      padding: 20px;
      border-radius: 12px;
      overflow-x: auto;
      margin-top: 15px;
      margin-bottom: 15px;
      box-shadow: 0 5px 15px var(--shadow-strong);
      transition: background-color 0.5s ease-in-out, border-color 0.5s ease-in-out, color 0.5s ease-in-out;
      background-color: #f6f8fa; /* Default light highlight.js bg */
    }
    .theme-dark pre,
    .theme-deep-ocean pre,
    .theme-crimson-sunset pre,
    .theme-grapevine pre,
    .theme-midnight-plum pre,
    .theme-steel-grey pre {
        background-color: #282c34; /* Default dark highlight.js bg */
    }

    pre code {
      font-family: var(--font-code); /* Applied code font */
      font-size: 0.95rem;
      display: block;
      padding-right: 60px;
      line-height: 1.5;
    }
    .copy-btn {
      position: absolute;
      top: 12px;
      right: 12px;
      padding: 8px 15px;
      font-size: 0.85rem;
      background: var(--copy-button-bg);
      color: white;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      transition: background-color 0.2s ease, opacity 0.2s ease, transform 0.2s ease;
      display: flex;
      align-items: center;
      gap: 8px;
      opacity: 0.9;
      font-family: var(--font-body);
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .copy-btn:hover {
      background: var(--copy-button-hover-bg);
      opacity: 1;
      transform: translateY(-2px);
    }
    .copy-btn i {
      font-size: 1.1rem;
    }

    /* Footer styling */
    .app-footer {
      padding: 15px 30px;
      background-color: var(--footer-bg);
      color: var(--text-secondary);
      text-align: center;
      font-size: 0.9rem;
      border-top: 1px solid var(--border-color);
      font-family: var(--font-body);
      box-shadow: var(--shadow-light);
      flex-shrink: 0;
      border-radius: 15px 15px 0 0; /* Rounded top corners to match input area */
      transition: background-color 0.5s ease-in-out, color 0.5s ease-in-out, border-color 0.5s ease-in-out;
    }

    /* --- Settings Modal --- */
    .modal-backdrop.show { opacity: 0.4; } /* Lighter backdrop */

    .settings-modal .modal-content {
        background-color: var(--modal-bg);
        border: 1px solid var(--modal-border);
        border-radius: 15px;
        box-shadow: var(--modal-shadow);
        color: var(--modal-text);
        transition: background-color 0.5s ease-in-out, border-color 0.5s ease-in-out, color 0.5s ease-in-out, box-shadow 0.5s ease-in-out;
    }
    .settings-modal .modal-header {
        border-bottom: 1px solid var(--modal-border);
        padding: 18px 25px; /* Increased padding */
        flex-direction: column; /* Stack title and subtitle */
        align-items: flex-start;
    }
    .settings-modal .modal-title {
        font-size: 1.6rem; /* Slightly larger */
        font-weight: 600;
        color: var(--primary-accent);
    }
    .settings-modal .modal-subtitle {
        font-size: 0.95rem; /* Slightly larger */
        color: var(--text-secondary);
        margin-top: 5px;
    }
    .settings-modal .btn-close {
        background: none;
        border: none;
        font-size: 1.6rem;
        position: absolute;
        right: 18px;
        top: 18px;
        color: var(--text-secondary);
        opacity: 1;
        transition: color 0.3s ease;
    }
    .settings-modal .btn-close:hover {
        color: var(--primary-accent);
        opacity: 1;
    }
    .settings-modal .modal-body {
        padding: 25px; /* Increased padding */
    }
    .theme-options {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(130px, 1fr)); /* Larger tiles */
        gap: 15px;
    }
    .theme-option {
        border: 2px solid var(--theme-option-border);
        border-radius: 12px; /* Slightly more rounded */
        padding: 15px;
        cursor: pointer;
        text-align: center;
        font-size: 0.95rem; /* Slightly larger font */
        font-weight: 500;
        background-color: var(--theme-option-bg);
        color: var(--modal-text);
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 110px; /* Taller tiles */
    }
    .theme-option:hover {
        background-color: var(--theme-option-hover-bg);
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .theme-option.selected {
        border-color: var(--primary-accent);
        background-color: var(--theme-option-selected-bg);
        color: var(--theme-option-selected-text);
        box-shadow: 0 5px 20px rgba(var(--button-shadow-rgb), 0.3);
        transform: translateY(-2px);
    }
    .theme-option.selected .theme-preview-box {
      border-color: #ffffff; /* White border for selected preview */
    }
    .theme-option .theme-preview-box {
        width: 45px; /* Larger preview box */
        height: 45px;
        border-radius: 50%;
        margin-bottom: 10px;
        border: 2px solid var(--border-color);
        box-shadow: inset 0 0 5px rgba(0,0,0,0.1);
        transition: border-color 0.3s ease;
    }

    /* Specific theme preview box colors */
    .theme-option[data-theme="system"] .theme-preview-box { background: linear-gradient(to right, #6B46C1 50%, #1F143D 50%); } /* Light & Dark mix */
    .theme-option[data-theme="default-light"] .theme-preview-box { background-color: #6B46C1; }
    .theme-option[data-theme="dark"] .theme-preview-box { background-color: #1F143D; }
    .theme-option[data-theme="classic-blue"] .theme-preview-box { background-color: #007bff; }
    .theme-option[data-theme="zen-garden"] .theme-preview-box { background-color: #4CAF50; }
    .theme-option[data-theme="warm-cocoa"] .theme-preview-box { background-color: #795548; }
    .theme-option[data-theme="deep-ocean"] .theme-preview-box { background-color: #1976D2; }
    .theme-option[data-theme="crimson-sunset"] .theme-preview-box { background-color: #D32F2F; }
    .theme-option[data-theme="grapevine"] .theme-preview-box { background-color: #9C27B0; }
    .theme-option[data-theme="emerald-forest"] .theme-preview-box { background-color: #388E3C; }
    .theme-option[data-theme="arctic-breeze"] .theme-preview-box { background-color: #00BCD4; }
    .theme-option[data-theme="amethyst-dream"] .theme-preview-box { background-color: #AB47BC; }
    .theme-option[data-theme="golden-hour"] .theme-preview-box { background-color: #FFAB00; }
    .theme-option[data-theme="midnight-plum"] .theme-preview-box { background-color: #673AB7; }
    .theme-option[data-theme="soft-peach"] .theme-preview-box { background-color: #FF8A65; }
    .theme-option[data-theme="steel-grey"] .theme-preview-box { background-color: #607D8B; }
    .theme-option[data-theme="vivid-teal"] .theme-preview-box { background-color: #009688; }

    .theme-option[data-theme="custom"] .theme-preview-box { 
      background: linear-gradient(135deg, var(--custom-primary-accent) 50%, var(--custom-secondary-accent) 50%); 
      border-color: var(--custom-border-color); /* Custom border for custom preview */
    }


    /* Custom Theme Section */
    .custom-theme-section {
      margin-top: 25px;
      padding-top: 20px;
      border-top: 1px solid var(--modal-border);
    }
    .settings-modal h6 {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 15px;
        color: var(--text-main);
    }
    .color-picker-group, .font-picker-group {
      margin-bottom: 15px;
      display: flex;
      align-items: center;
      gap: 10px;
    }
    .color-picker-group label, .font-picker-group label {
      flex-basis: 140px; /* Wider label for alignment */
      font-weight: 500;
      color: var(--modal-text);
      font-size: 0.95rem;
    }
    .color-picker-group input[type="color"] {
      width: 45px; /* Slightly larger color picker */
      height: 45px;
      border: none;
      border-radius: 8px; /* Slightly rounded */
      cursor: pointer;
      padding: 0;
      background: none;
      transition: transform 0.2s ease;
    }
    .color-picker-group input[type="color"]::-webkit-color-swatch-wrapper {
      padding: 0;
    }
    .color-picker-group input[type="color"]::-webkit-color-swatch {
      border: 1px solid var(--border-color);
      border-radius: 8px;
    }
    .color-picker-group input[type="color"]:hover {
      transform: scale(1.1);
    }
    .color-picker-group input[type="text"] {
      flex-grow: 1;
      padding: 10px 15px; /* More padding */
      border: 1px solid var(--border-color);
      border-radius: 10px; /* More rounded */
      background-color: var(--input-bg);
      color: var(--input-text);
      font-size: 0.95rem;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }
    .color-picker-group input[type="text"]:focus {
      outline: none;
      border-color: var(--primary-accent);
      box-shadow: 0 0 0 0.2rem rgba(var(--button-shadow-rgb), 0.1);
    }

    .font-picker-group select {
        flex-grow: 1;
        padding: 10px 15px;
        border: 1px solid var(--border-color);
        border-radius: 10px;
        background-color: var(--input-bg);
        color: var(--input-text);
        font-size: 0.95rem;
        cursor: pointer;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
        -webkit-appearance: none; /* Remove default arrow */
        -moz-appearance: none;
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%236F42C1'%3E%3Cpath d='M7 10l5 5 5-5z'/%3E%3C/svg%3E"); /* Custom arrow */
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 20px;
    }
    .font-picker-group select:focus {
        outline: none;
        border-color: var(--primary-accent);
        box-shadow: 0 0 0 0.2rem rgba(var(--button-shadow-rgb), 0.1);
    }

    #customCssInput {
      width: 100%;
      min-height: 120px; /* Taller textarea */
      padding: 15px;
      border: 1px solid var(--border-color);
      border-radius: 10px;
      font-family: var(--font-code);
      font-size: 0.9rem;
      background-color: var(--input-bg);
      color: var(--input-text);
      resize: vertical;
      margin-top: 10px;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }
    #customCssInput:focus {
      outline: none;
      border-color: var(--primary-accent);
      box-shadow: 0 0 0 0.2rem rgba(var(--button-shadow-rgb), 0.1);
    }

    .apply-custom-btn {
      background-color: var(--primary-accent);
      color: white;
      border: none;
      padding: 12px 25px; /* More padding */
      border-radius: 10px; /* More rounded */
      cursor: pointer;
      margin-top: 18px; /* More margin */
      font-weight: 500;
      transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
      box-shadow: 0 3px 10px rgba(var(--button-shadow-rgb), 0.3);
    }
    .apply-custom-btn:hover {
      background-color: var(--button-hover-bg);
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(var(--button-shadow-rgb), 0.4);
    }

    /* Keyframe for message animation */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .app-header { font-size: 1.4rem; padding: 15px 20px; border-radius: 0 0 10px 10px; }
      .app-header .title i { font-size: 1.8rem; }
      .control-btn { width: 44px; height: 44px; font-size: 1.6rem; }
      #system-theme-toggle-btn { width: 50px; height: 44px; }
      #system-theme-icon { font-size: 1.4rem; }
      #chat-box { margin: 15px 20px; padding: 20px; gap: 15px; border-radius: 18px; }
      .message-content { max-width: 90%; font-size: 0.9rem; padding: 14px 18px; border-radius: 20px; }
      .user-message .message-content { border-bottom-right-radius: 6px; }
      .assistant-message .message-content { border-bottom-left-radius: 6px; }
      .input-area { padding: 15px 20px; gap: 12px; border-radius: 10px 10px 0 0; }
      .input-area textarea { padding: 14px 20px; font-size: 0.95rem; min-height: 55px; border-radius: 30px; }
      .input-area button { width: 52px; height: 52px; padding: 14px; }
      .input-area button i { font-size: 20px; }
      pre { padding: 18px; border-radius: 10px; }
      pre code { font-size: 0.9rem; padding-right: 50px; }
      .copy-btn { top: 10px; right: 10px; padding: 6px 12px; font-size: 0.8rem; gap: 6px; }
      .copy-btn i { font-size: 1rem; }
      .app-footer { padding: 12px 20px; font-size: 0.85rem; border-radius: 10px 10px 0 0; }
      .settings-modal .modal-title { font-size: 1.3rem; }
      .settings-modal .modal-subtitle { font-size: 0.8rem; }
      .theme-options { grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); }
      .theme-option { padding: 10px; min-height: 90px; font-size: 0.9rem; }
      .theme-option .theme-preview-box { width: 30px; height: 30px; }
      .color-picker-group label, .font-picker-group label { flex-basis: 100px; font-size: 0.9rem; }
      .color-picker-group input[type="text"], .font-picker-group select { padding: 8px 12px; font-size: 0.85rem; }
      #customCssInput { min-height: 100px; padding: 12px; font-size: 0.8rem; }
      .apply-custom-btn { padding: 10px 20px; font-size: 0.9rem; }
    }

    @media (max-width: 480px) {
      .app-header { font-size: 1.2rem; padding: 12px 15px; border-radius: 0 0 8px 8px; }
      .app-header .title i { font-size: 1.6rem; margin-right: 8px; }
      .control-btn { width: 40px; height: 40px; font-size: 1.4rem; }
      #system-theme-toggle-btn { width: 45px; height: 40px; }
      #system-theme-icon { font-size: 1.2rem; }
      #chat-box { margin: 10px 15px; padding: 15px; gap: 12px; border-radius: 15px; }
      .message-content { max-width: 95%; font-size: 0.85rem; padding: 12px 16px; border-radius: 18px; }
      .user-message .message-content { border-bottom-right-radius: 5px; }
      .assistant-message .message-content { border-bottom-left-radius: 5px; }
      .input-area { padding: 12px 15px; gap: 10px; border-radius: 8px 8px 0 0; }
      .input-area textarea { padding: 12px 18px; font-size: 0.88rem; min-height: 50px; border-radius: 25px; }
      .input-area button { width: 48px; height: 48px; padding: 12px; }
      .input-area button i { font-size: 18px; }
      pre { padding: 15px; border-radius: 8px; }
      pre code { font-size: 0.85rem; padding-right: 40px; }
      .copy-btn { top: 8px; right: 8px; padding: 5px 10px; font-size: 0.75rem; gap: 5px; }
      .copy-btn i { font-size: 0.9rem; }
      .app-footer { padding: 10px 15px; font-size: 0.8rem; border-radius: 8px 8px 0 0; }
      .settings-modal .modal-dialog { margin: 0.5rem; }
      .settings-modal .modal-title { font-size: 1.2rem; }
      .theme-options { grid-template-columns: repeat(auto-fill, minmax(80px, 1fr)); }
      .theme-option { font-size: 0.8rem; }
      .theme-option .theme-preview-box { width: 30px; height: 30px; }
      .color-picker-group label, .font-picker-group label { flex-basis: 80px; font-size: 0.85rem; }
      .color-picker-group input[type="color"] { width: 35px; height: 35px; }
      .color-picker-group input[type="text"], .font-picker-group select { padding: 6px 10px; font-size: 0.8rem; }
      #customCssInput { min-height: 80px; padding: 10px; font-size: 0.75rem; }
      .apply-custom-btn { padding: 8px 15px; font-size: 0.8rem; }
    }
  </style>
</head>
<body>
  <div class="app-header">
    <button class="control-btn" id="system-theme-toggle-btn" title="Toggle System Theme">
      <i class="fa-solid fa-desktop" id="system-theme-icon"></i> </button>
    <div class="title">
      <i class="ri-sparkling-fill"></i>Chatlefy
    </div>
    <button class="control-btn settings-btn" data-bs-toggle="modal" data-bs-target="#settingsModal" title="Settings">
      <i class="ri-settings-3-line"></i>
    </button>
  </div>

  <div id="chat-box"></div>

  <div class="input-area">
    <button id="speak-btn" onclick="speakLastResponse()" title="Speak Last Response">
      <i class="ri-volume-up-line"></i>
    </button>
    <textarea id="user-input" placeholder="Ask anything..." oninput="autoExpand(this)" rows="1" aria-label="Type your message"></textarea>
    <button id="send-btn" onclick="sendMessage()" title="Send Message">
      <i class="ri-send-plane-fill"></i>
    </button>
  </div>

  <div class="app-footer">
    Powered by Smart Tell Line
  </div>

  <div class="modal fade settings-modal" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="settingsModalLabel">App Settings</h5>
          <p class="modal-subtitle">Customize your Chatlefy experience with themes and advanced options.</p>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <h6>Choose Theme:</h6>
          <div class="theme-options">
            <div class="theme-option" data-theme="system">
              <div class="theme-preview-box"></div>
              <span>System</span>
            </div>
            <div class="theme-option" data-theme="default-light">
              <div class="theme-preview-box"></div>
              <span>Default Light</span>
            </div>
            <div class="theme-option" data-theme="dark">
              <div class="theme-preview-box"></div>
              <span>Default Dark</span>
            </div>
            <div class="theme-option" data-theme="classic-blue">
              <div class="theme-preview-box"></div>
              <span>Classic Blue</span>
            </div>
            <div class="theme-option" data-theme="zen-garden">
              <div class="theme-preview-box"></div>
              <span>Zen Garden</span>
            </div>
            <div class="theme-option" data-theme="warm-cocoa">
              <div class="theme-preview-box"></div>
              <span>Warm Cocoa</span>
            </div>
            <div class="theme-option" data-theme="deep-ocean">
              <div class="theme-preview-box"></div>
              <span>Deep Ocean</span>
            </div>
            <div class="theme-option" data-theme="crimson-sunset">
              <div class="theme-preview-box"></div>
              <span>Crimson Sunset</span>
            </div>
            <div class="theme-option" data-theme="grapevine">
              <div class="theme-preview-box"></div>
              <span>Grapevine</span>
            </div>
            <div class="theme-option" data-theme="emerald-forest">
              <div class="theme-preview-box"></div>
              <span>Emerald Forest</span>
            </div>
            <div class="theme-option" data-theme="arctic-breeze">
              <div class="theme-preview-box"></div>
              <span>Arctic Breeze</span>
            </div>
            <div class="theme-option" data-theme="amethyst-dream">
              <div class="theme-preview-box"></div>
              <span>Amethyst Dream</span>
            </div>
            <div class="theme-option" data-theme="golden-hour">
              <div class="theme-preview-box"></div>
              <span>Golden Hour</span>
            </div>
            <div class="theme-option" data-theme="midnight-plum">
              <div class="theme-preview-box"></div>
              <span>Midnight Plum</span>
            </div>
            <div class="theme-option" data-theme="soft-peach">
              <div class="theme-preview-box"></div>
              <span>Soft Peach</span>
            </div>
            <div class="theme-option" data-theme="steel-grey">
              <div class="theme-preview-box"></div>
              <span>Steel Grey</span>
            </div>
            <div class="theme-option" data-theme="vivid-teal">
              <div class="theme-preview-box"></div>
              <span>Vivid Teal</span>
            </div>
            <div class="theme-option" data-theme="custom">
              <div class="theme-preview-box"></div>
              <i class="ri-palette-line" style="font-size: 2rem; margin-bottom: 5px;"></i>
              <span>Custom</span>
            </div>
          </div>

          <div class="custom-theme-section">
            <h6>Customize Colors:</h6>
            <div class="color-picker-group">
              <label for="primaryColor">Primary Accent:</label>
              <input type="color" id="primaryColor" value="#6B46C1">
              <input type="text" id="primaryColorHex" value="#6B46C1">
            </div>
            <div class="color-picker-group">
              <label for="secondaryColor">Secondary Accent:</label>
              <input type="color" id="secondaryColor" value="#EAE4F4">
              <input type="text" id="secondaryColorHex" value="#EAE4F4">
            </div>
            <div class="color-picker-group">
              <label for="bgColorStart">Background Start:</label>
              <input type="color" id="bgColorStart" value="#F8F5FB">
              <input type="text" id="bgColorStartHex" value="#F8F5FB">
            </div>
            <div class="color-picker-group">
              <label for="bgColorEnd">Background End:</label>
              <input type="color" id="bgColorEnd" value="#E9E1F5">
              <input type="text" id="bgColorEndHex" value="#E9E1F5">
            </div>
            <div class="color-picker-group">
              <label for="uiBgColor">UI Background:</label>
              <input type="color" id="uiBgColor" value="#FFFFFF">
              <input type="text" id="uiBgColorHex" value="#FFFFFF">
            </div>
             <div class="color-picker-group">
              <label for="textColor">Main Text:</label>
              <input type="color" id="textColor" value="#2C005F">
              <input type="text" id="textColorHex" value="#2C005F">
            </div>
            <div class="color-picker-group">
              <label for="borderColor">Border Color:</label>
              <input type="color" id="borderColor" value="#D8D1E6">
              <input type="text" id="borderColorHex" value="#D8D1E6">
            </div>

            <h6 class="mt-4">Customize Fonts (from Google Fonts):</h6>
            <div class="font-picker-group">
              <label for="headingFont">Heading Font:</label>
              <select id="headingFont">
                </select>
            </div>
            <div class="font-picker-group">
              <label for="bodyFont">Body Font:</label>
              <select id="bodyFont">
                </select>
            </div>
            <div class="font-picker-group">
              <label for="codeFont">Code Font:</label>
              <select id="codeFont">
                </select>
            </div>
            
            <button class="apply-custom-btn" id="applyCustomThemeBtn">Apply Custom Theme</button>

            <h6 class="mt-4">Advanced Custom CSS:</h6>
            <textarea id="customCssInput" placeholder="Add your custom CSS here (e.g., body { font-size: 16px; })"></textarea>
            <button class="apply-custom-btn" id="applyCustomCssBtn">Apply Custom CSS</button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/marked/11.0.0/marked.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>

  <script>
    // Highlight.js configuration
    hljs.configure({ languages: ['javascript', 'html', 'xml', 'css', 'json', 'typescript', 'bash', 'markdown', 'python', 'java', 'csharp'] });

    let lastAssistantReply = "";
    // Using the original unique-chatlefy-user-id as requested
    let userId = localStorage.getItem("chatlefy_user_id"); 
    if (!userId) {
      userId = "chatlefy-user-" + Math.random().toString(36).substring(2, 15) + Date.now();
      localStorage.setItem("chatlefy_user_id", userId);
    }

    // --- Theme Management ---
    const highlightJsLink = document.getElementById('hljs-theme');
    const systemThemeToggleButton = document.getElementById('system-theme-toggle-btn');
    const systemThemeIcon = document.getElementById('system-theme-icon');
    const themeOptions = document.querySelectorAll('.theme-option');

    const themes = {
      'system': { class: '', hljsLight: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css', hljsDark: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css' },
      'default-light': { class: 'theme-default-light', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css' },
      'dark': { class: 'theme-dark', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css' },
      'classic-blue': { class: 'theme-classic-blue', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css' },
      'zen-garden': { class: 'theme-zen-garden', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css' },
      'warm-cocoa': { class: 'theme-warm-cocoa', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css' },
      'deep-ocean': { class: 'theme-deep-ocean', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css' },
      'crimson-sunset': { class: 'theme-crimson-sunset', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css' },
      'grapevine': { class: 'theme-grapevine', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css' },
      'emerald-forest': { class: 'theme-emerald-forest', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css' },
      'arctic-breeze': { class: 'theme-arctic-breeze', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css' },
      'amethyst-dream': { class: 'theme-amethyst-dream', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css' },
      'golden-hour': { class: 'theme-golden-hour', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css' },
      'midnight-plum': { class: 'theme-midnight-plum', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css' },
      'soft-peach': { class: 'theme-soft-peach', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css' },
      'steel-grey': { class: 'theme-steel-grey', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css' },
      'vivid-teal': { class: 'theme-vivid-teal', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/github.min.css' },
      'custom': { class: 'theme-custom', hljs: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/atom-one-dark.min.css' } // Default dark for custom code blocks
    };

    let activeTheme = 'default-light'; // Default theme
    let isSystemPreferenceDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

    // Custom theme elements
    const primaryColorInput = document.getElementById('primaryColor');
    const primaryColorHexInput = document.getElementById('primaryColorHex');
    const secondaryColorInput = document.getElementById('secondaryColor');
    const secondaryColorHexInput = document.getElementById('secondaryColorHex');
    const bgColorStartInput = document.getElementById('bgColorStart');
    const bgColorStartHexInput = document.getElementById('bgColorStartHex');
    const bgColorEndInput = document.getElementById('bgColorEnd');
    const bgColorEndHexInput = document.getElementById('bgColorEndHex');
    const uiBgColorInput = document.getElementById('uiBgColor');
    const uiBgColorHexInput = document.getElementById('uiBgColorHex');
    const textColorInput = document.getElementById('textColor');
    const textColorHexInput = document.getElementById('textColorHex');
    const borderColorInput = document.getElementById('borderColor');
    const borderColorHexInput = document.getElementById('borderColorHex');
    const headingFontSelect = document.getElementById('headingFont');
    const bodyFontSelect = document.getElementById('bodyFont');
    const codeFontSelect = document.getElementById('codeFont');
    const applyCustomThemeBtn = document.getElementById('applyCustomThemeBtn');
    const customCssInput = document.getElementById('customCssInput');
    const applyCustomCssBtn = document.getElementById('applyCustomCssBtn');

    // Google Fonts list (a curated selection)
    const googleFonts = [
        { name: 'Inter', stack: "'Inter', sans-serif" },
        { name: 'DM Sans', stack: "'DM Sans', sans-serif" },
        { name: 'Roboto', stack: "'Roboto', sans-serif" },
        { name: 'Open Sans', stack: "'Open Sans', sans-serif" },
        { name: 'Lato', stack: "'Lato', sans-serif" },
        { name: 'Montserrat', stack: "'Montserrat', sans-serif" },
        { name: 'Poppins', stack: "'Poppins', sans-serif" },
        { name: 'Source Sans 3', stack: "'Source Sans 3', sans-serif" },
        { name: 'JetBrains Mono', stack: "'JetBrains Mono', monospace" },
        { name: 'Fira Code', stack: "'Fira Code', monospace" },
        { name: 'Roboto Mono', stack: "'Roboto Mono', monospace" },
        { name: 'Ubuntu Mono', stack: "'Ubuntu Mono', monospace" },
        { name: 'Merriweather', stack: "'Merriweather', serif" },
        { name: 'Playfair Display', stack: "'Playfair Display', serif" },
        { name: 'Lora', stack: "'Lora', serif" },
    ];

    // Function to populate font select dropdowns
    function populateFontSelects() {
        const fontSelects = [headingFontSelect, bodyFontSelect, codeFontSelect];
        fontSelects.forEach(select => {
            googleFonts.forEach(font => {
                const option = document.createElement('option');
                option.value = font.stack;
                option.textContent = font.name;
                select.appendChild(option);
            });
        });
    }


    // Function to set RGB variables for dynamic shadows
    function setRgbVariables(colorHex, prefix) {
      if (!colorHex || colorHex.length !== 7) return; // Ensure valid hex
      const r = parseInt(colorHex.slice(1, 3), 16);
      const g = parseInt(colorHex.slice(3, 5), 16);
      const b = parseInt(colorHex.slice(5, 7), 16);
      document.documentElement.style.setProperty(`--${prefix}-r`, r);
      document.documentElement.style.setProperty(`--${prefix}-g`, g);
      document.documentElement.style.setProperty(`--${prefix}-b`, b);
    }

    function applyTheme(themeName, source = 'manual') {
      // Remove all existing theme classes from body
      for (const key in themes) {
        if (themes[key].class) { // Only remove if there's an actual class
          document.body.classList.remove(themes[key].class);
        }
      }

      let hljsStyleSheet = "";
      let actualThemeClass = '';

      // Handle system theme
      if (themeName === 'system') {
        isSystemPreferenceDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        actualThemeClass = isSystemPreferenceDark ? 'theme-dark' : 'theme-default-light'; // Apply specific class
        document.body.classList.add(actualThemeClass);
        hljsStyleSheet = isSystemPreferenceDark ? themes['system'].hljsDark : themes['system'].hljsLight;
        systemThemeIcon.className = isSystemPreferenceDark ? 'fa-solid fa-moon' : 'fa-solid fa-sun'; // Font Awesome icons
      } else if (themeName === 'custom') {
        applyCustomThemeCSS(); // Apply custom colors and fonts
        actualThemeClass = themes['custom'].class;
        document.body.classList.add(actualThemeClass);
        hljsStyleSheet = themes['custom'].hljs;
        systemThemeIcon.className = 'ri-palette-line'; // RemixIcon for custom theme
      } else {
        actualThemeClass = themes[themeName].class;
        document.body.classList.add(actualThemeClass);
        hljsStyleSheet = themes[themeName].hljs;
        systemThemeIcon.className = 'fa-solid fa-desktop'; // Reset to desktop if a specific theme
      }

      highlightJsLink.href = hljsStyleSheet;
      
      // Update RGB for dynamic shadows based on the *applied* theme's accent colors
      // Use setTimeout to ensure computed style is based on newly applied CSS variables
      setTimeout(() => {
        const computedStyle = getComputedStyle(document.body);
        const primaryAccentColor = computedStyle.getPropertyValue('--primary-accent').trim();
        const speakButtonBgColor = computedStyle.getPropertyValue('--speak-button-bg').trim();
        
        setRgbVariables(primaryAccentColor, 'button-shadow');
        setRgbVariables(speakButtonBgColor, 'speak-button-shadow');
      }, 0); 

      activeTheme = themeName; // Store the selected theme

      if (source === 'manual') { // Only save if selected from modal, not system preference change
        localStorage.setItem('selectedTheme', themeName);
      }
      updateThemeSelectionInModal(activeTheme); // Ensure modal selection is updated
      applyCustomUserCss(); // Apply custom CSS after theme to ensure it overrides
    }

    // Function to update the selected class in the modal
    function updateThemeSelectionInModal(selectedThemeName) {
      themeOptions.forEach(option => {
        if (option.dataset.theme === selectedThemeName) {
          option.classList.add('selected');
        } else {
          option.classList.remove('selected');
        }
      });
    }

    // Initialize theme on page load
    document.addEventListener('DOMContentLoaded', () => {
        populateFontSelects(); // Populate font dropdowns
        loadCustomThemeSettings(); // Load custom colors and fonts from local storage
        const savedTheme = localStorage.getItem('selectedTheme') || 'system'; // Default to 'system'
        applyTheme(savedTheme, 'initial');

        // Set default font selection in custom theme panel based on loaded custom settings or current theme's fonts
        const rootStyle = getComputedStyle(document.documentElement);
        headingFontSelect.value = localStorage.getItem('customHeadingFont') || rootStyle.getPropertyValue('--font-heading').trim();
        bodyFontSelect.value = localStorage.getItem('customBodyFont') || rootStyle.getPropertyValue('--font-body').trim();
        codeFontSelect.value = localStorage.getItem('customCodeFont') || rootStyle.getPropertyValue('--font-code').trim();
    });

    // Load and apply custom theme colors and CSS from local storage
    function loadCustomThemeSettings() {
        const savedCustomColors = JSON.parse(localStorage.getItem('customThemeColors'));
        if (savedCustomColors) {
            primaryColorInput.value = savedCustomColors.primaryAccent;
            primaryColorHexInput.value = savedCustomColors.primaryAccent;
            secondaryColorInput.value = savedCustomColors.secondaryAccent;
            secondaryColorHexInput.value = savedCustomColors.secondaryAccent;
            bgColorStartInput.value = savedCustomColors.bgColorStart;
            bgColorStartHexInput.value = savedCustomColors.bgColorStart;
            bgColorEndInput.value = savedCustomColors.bgColorEnd;
            bgColorEndHexInput.value = savedCustomColors.bgColorEnd;
            uiBgColorInput.value = savedCustomColors.uiBgColor;
            uiBgColorHexInput.value = savedCustomColors.uiBgColor;
            textColorInput.value = savedCustomColors.textColor;
            textColorHexInput.value = savedCustomColors.textColor;
            borderColorInput.value = savedCustomColors.borderColor;
            borderColorHexInput.value = savedCustomColors.borderColor;
            
            // Apply colors to the custom preview box immediately on load
            document.querySelector('.theme-option[data-theme="custom"] .theme-preview-box').style.background = 
                `linear-gradient(135deg, ${savedCustomColors.primaryAccent} 50%, ${savedCustomColors.secondaryAccent} 50%)`;
            document.querySelector('.theme-option[data-theme="custom"] .theme-preview-box').style.borderColor = savedCustomColors.borderColor;

        }
        const savedCustomFonts = JSON.parse(localStorage.getItem('customThemeFonts'));
        if (savedCustomFonts) {
            headingFontSelect.value = savedCustomFonts.headingFont;
            bodyFontSelect.value = savedCustomFonts.bodyFont;
            codeFontSelect.value = savedCustomFonts.codeFont;
        }

        const savedCustomCss = localStorage.getItem('customUserCss');
        if (savedCustomCss) {
            customCssInput.value = savedCustomCss;
        }
    }

    // Apply custom theme CSS variables
    function applyCustomThemeCSS() {
        const root = document.documentElement;
        const customColors = {
            primaryAccent: primaryColorInput.value,
            secondaryAccent: secondaryColorInput.value,
            bgColorStart: bgColorStartInput.value,
            bgColorEnd: bgColorEndInput.value,
            uiBgColor: uiBgColorInput.value,
            textColor: textColorInput.value,
            borderColor: borderColorInput.value
        };
        const customFonts = {
            headingFont: headingFontSelect.value,
            bodyFont: bodyFontSelect.value,
            codeFont: codeFontSelect.value
        };

        // Apply colors
        for (const [key, value] of Object.entries(customColors)) {
            root.style.setProperty(`--custom-${key.replace(/([A-Z])/g, '-$1').toLowerCase()}`, value);
        }
        // Apply fonts
        for (const [key, value] of Object.entries(customFonts)) {
            root.style.setProperty(`--custom-${key.replace(/([A-Z])/g, '-$1').toLowerCase()}`, value);
            // Dynamically load font if not already loaded
            const fontName = value.split(',')[0].replace(/['"]/g, '').trim();
            if (fontName && !document.querySelector(`link[href*="${fontName.replace(/ /g, '+')}"]`)) {
                const link = document.createElement('link');
                link.rel = 'stylesheet';
                link.href = `https://fonts.googleapis.com/css2?family=${fontName.replace(/ /g, '+')}:wght@300;400;500;600;700&display=swap`;
                document.head.appendChild(link);
            }
        }
    }

    // Apply custom user-provided CSS
    function applyCustomUserCss() {
        let customStyleTag = document.getElementById('custom-user-css');
        if (!customStyleTag) {
            customStyleTag = document.createElement('style');
            customStyleTag.id = 'custom-user-css';
            document.head.appendChild(customStyleTag);
        }
        customStyleTag.textContent = customCssInput.value;
    }

    // Save custom theme colors to local storage
    function saveCustomThemeSettings() {
        const customColors = {
            primaryAccent: primaryColorInput.value,
            secondaryAccent: secondaryColorInput.value,
            bgColorStart: bgColorStartInput.value,
            bgColorEnd: bgColorEndInput.value,
            uiBgColor: uiBgColorInput.value,
            textColor: textColorInput.value,
            borderColor: borderColorInput.value
        };
        localStorage.setItem('customThemeColors', JSON.stringify(customColors));

        const customFonts = {
            headingFont: headingFontSelect.value,
            bodyFont: bodyFontSelect.value,
            codeFont: codeFontSelect.value
        };
        localStorage.setItem('customThemeFonts', JSON.stringify(customFonts));
    }

    // Save custom user CSS to local storage
    function saveCustomUserCssToStorage() {
        localStorage.setItem('customUserCss', customCssInput.value);
    }

    // Listen for system theme changes (if 'system' theme is active)
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', event => {
      if (activeTheme === 'system') {
        applyTheme('system', 'system-preference');
      }
    });

    // Add event listeners for theme options in the modal
    themeOptions.forEach(option => {
      option.addEventListener('click', () => {
        const themeName = option.dataset.theme;
        applyTheme(themeName, 'manual');
        const modalElement = document.getElementById('settingsModal');
        const modal = bootstrap.Modal.getInstance(modalElement);
        if (modal) {
            modal.hide();
        }
      });
    });

    // System Theme Toggle button handler on the header
    systemThemeToggleButton.addEventListener('click', () => {
      if (activeTheme === 'system') {
        // If currently system, cycle to the opposite of current system preference
        const nextTheme = isSystemPreferenceDark ? 'default-light' : 'dark';
        applyTheme(nextTheme, 'manual'); // Manually select a specific theme
      } else if (activeTheme === 'dark') {
        applyTheme('default-light', 'manual');
      } else if (activeTheme === 'default-light') {
        applyTheme('dark', 'manual');
      } else {
        // If any other specific theme (including custom) is active, clicking this button defaults to system mode
        applyTheme('system', 'manual');
      }
       // Animate the icon
      gsap.fromTo(systemThemeIcon, { scale: 0.8, rotation: 0 }, { scale: 1.1, rotation: 360, duration: 0.5, ease: "back.out(1.7)" });
    });

    // Custom theme color picker and text input sync
    document.querySelectorAll('.color-picker-group input[type="color"]').forEach(input => {
        input.addEventListener('input', (event) => {
            const hexInput = document.getElementById(event.target.id + 'Hex');
            hexInput.value = event.target.value.toUpperCase(); // Convert to uppercase for consistency
            // Update custom preview box color immediately
            const customPreviewBox = document.querySelector('.theme-option[data-theme="custom"] .theme-preview-box');
            if (event.target.id === 'primaryColor') {
                const secondaryColor = document.getElementById('secondaryColor').value;
                customPreviewBox.style.background = `linear-gradient(135deg, ${event.target.value} 50%, ${secondaryColor} 50%)`;
            } else if (event.target.id === 'secondaryColor') {
                const primaryColor = document.getElementById('primaryColor').value;
                customPreviewBox.style.background = `linear-gradient(135deg, ${primaryColor} 50%, ${event.target.value} 50%)`;
            } else if (event.target.id === 'borderColor') {
                customPreviewBox.style.borderColor = event.target.value;
            }
        });
    });

    document.querySelectorAll('.color-picker-group input[type="text"]').forEach(input => {
        input.addEventListener('input', (event) => {
            const colorInput = document.getElementById(event.target.id.replace('Hex', ''));
            const inputValue = event.target.value.toUpperCase();
            // Basic validation for hex color
            if (/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(inputValue)) {
                colorInput.value = inputValue;
                 // Update custom preview box color immediately
                const customPreviewBox = document.querySelector('.theme-option[data-theme="custom"] .theme-preview-box');
                if (event.target.id === 'primaryColorHex') {
                    const secondaryColor = document.getElementById('secondaryColor').value;
                    customPreviewBox.style.background = `linear-gradient(135deg, ${inputValue} 50%, ${secondaryColor} 50%)`;
                } else if (event.target.id === 'secondaryColorHex') {
                    const primaryColor = document.getElementById('primaryColor').value;
                    customPreviewBox.style.background = `linear-gradient(135deg, ${primaryColor} 50%, ${inputValue} 50%)`;
                } else if (event.target.id === 'borderColorHex') {
                    customPreviewBox.style.borderColor = inputValue;
                }
            }
        });
    });

    // Apply Custom Theme button handler
    applyCustomThemeBtn.addEventListener('click', () => {
        saveCustomThemeSettings(); // Save colors and fonts to local storage
        applyTheme('custom', 'manual'); // Apply the custom theme
        const modalElement = document.getElementById('settingsModal');
        const modal = bootstrap.Modal.getInstance(modalElement);
        if (modal) {
            modal.hide();
        }
    });

    // Apply Custom CSS button handler
    applyCustomCssBtn.addEventListener('click', () => {
        saveCustomUserCssToStorage(); // Save custom CSS to local storage
        applyCustomUserCss(); // Apply the custom CSS
        alert('Custom CSS applied! It will override existing styles.');
        const modalElement = document.getElementById('settingsModal');
        const modal = bootstrap.Modal.getInstance(modalElement);
        if (modal) {
            modal.hide();
        }
    });


    // --- Core Chatbot Functions ---
    function autoExpand(textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = (textarea.scrollHeight) + 'px';
    }

    function sendMessage() {
      const input = document.getElementById("user-input");
      const message = input.value.trim();
      if (!message) return;

      displayMessage(message, "user");
      input.value = "";
      input.style.height = 'auto'; // Reset textarea height after sending

      // Original backend call logic, not dummy responses
      fetch("/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId, message })
      })
      .then(res => {
        if (!res.ok) {
          return res.text().then(text => { throw new Error(`HTTP ${res.status}: ${text}`); });
        }
        return res.json();
      })
      .then(data => {
        displayMessage(data.reply, "assistant");
      })
      .catch(err => {
        console.error("Error:", err);
        displayMessage("I apologize, but Chatlefy is currently unavailable. Please try again later.", "assistant");
      });
    }

    function displayMessage(content, sender) {
      const chatBox = document.getElementById("chat-box");
      const msgDiv = document.createElement("div");
      msgDiv.className = `message ${sender}-message`;
      const messageContentDiv = document.createElement("div");
      messageContentDiv.className = "message-content";

      if (sender === "assistant") {
        const html = marked.parse(content, {
          highlight: (code, lang) => {
            const language = hljs.getLanguage(lang) ? lang : 'plaintext';
            return hljs.highlight(code, { language }).value;
          },
          gfm: true, breaks: true
        });
        messageContentDiv.innerHTML = html;
        lastAssistantReply = messageContentDiv.textContent || "";
        setTimeout(() => addCopyButtons(messageContentDiv), 100);
      } else {
        messageContentDiv.textContent = content;
      }

      msgDiv.appendChild(messageContentDiv);
      chatBox.appendChild(msgDiv);
      chatBox.scrollTop = chatBox.scrollHeight;

      // GSAP animation for new message entry
      gsap.fromTo(msgDiv,
        { opacity: 0, y: 30, scale: 0.98 },
        { opacity: 1, y: 0, scale: 1, duration: 0.5, ease: "power3.out" }
      );
    }

    function addCopyButtons(container) {
      container.querySelectorAll("pre").forEach(pre => {
        // Remove existing copy button if any, to prevent duplicates on re-render
        pre.querySelectorAll(".copy-btn").forEach(btn => btn.remove()); 

        const code = pre.querySelector("code");
        if (!code) return;

        const btn = document.createElement("button");
        btn.className = "copy-btn";
        btn.innerHTML = '<i class="ri-file-copy-line"></i> Copy'; // Remix Icon for copy

        btn.onclick = () => {
          navigator.clipboard.writeText(code.innerText)
            .then(() => {
              btn.innerHTML = '<i class="ri-check-line"></i> Copied!'; // Remix Icon for check
              gsap.to(btn, { backgroundColor: '#28a745', duration: 0.2 }); // Green for copied
              setTimeout(() => {
                btn.innerHTML = '<i class="ri-file-copy-line"></i> Copy'; // Back to original Remix Icon
                gsap.to(btn, { backgroundColor: 'var(--copy-button-bg)', duration: 0.2 }); // Back to original
              }, 1500);
            })
            .catch(() => {
              btn.innerHTML = '<i class="ri-close-line"></i> Error'; // Remix Icon for error
              gsap.to(btn, { backgroundColor: '#dc3545', duration: 0.2 }); // Red for error
              setTimeout(() => {
                btn.innerHTML = '<i class="ri-file-copy-line"></i> Copy';
                gsap.to(btn, { backgroundColor: 'var(--copy-button-bg)', duration: 0.2 });
              }, 1500);
            });
        };

        pre.style.position = "relative";
        pre.appendChild(btn);
      });
    }

    function speakLastResponse() {
      if (!lastAssistantReply) {
        alert("No message available to speak!");
        return;
      }
      if ('speechSynthesis' in window) {
        speechSynthesis.cancel();
        const utterance = new SpeechSynthesisUtterance(lastAssistantReply);
        utterance.lang = "en-US"; // Changed language to English
        speechSynthesis.speak(utterance);
        gsap.to("#speak-btn", { scale: 1.15, duration: 0.2, yoyo: true, repeat: 1, ease: "power1.inOut" });
      } else {
        alert("Sorry, your browser does not support speech synthesis.");
      }
    }
  </script>
</body>
</html>